# -*- coding: utf-8 -*-
"""Task1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cx3dHLNAT65S615Fq-noq8Y3I-udcr8u

# **Task 1: YouTube Streamer Analysis**
Dataset : Top 1000 YouTubers

**By: Prince Nkosi**

**Description**: This dataset contains valuable information about the top YouTube streamers,including their ranking, categories, subscribers,country, visits, likes, comments, and more.Your task is to perform a comprehensiveanalysis of the dataset to extract insightsabout the top YouTube content creators.

# Imports and Data Viewing
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

df=pd.read_csv('youtubers_df.csv')
df

"""# Data Exploration

**Clean the data. Find missing data and identify outliers**
"""

# rop the Links column and fix the 'Suscribes' error in the dataset

df.drop(columns=['Links'], inplace=True)
df.rename(columns={'Suscribers': 'Subscribers'}, inplace=True)
df

"""***Countries, Categories and their counts***


"""

uniqueCategory = df['Categories'].unique()

# Print the most occuring category in the dataset

categoryCounts = df['Categories'].value_counts()

print(categoryCounts, '\n')
print('\nNumber of countries: ', len(uniqueCategory), '\n')
print("The most occuring category is: " , categoryCounts.index[0])

uniqueCountry = df['Country'].unique()

# Print the most occuring category in the dataset

countryCounts = df['Country'].value_counts()

print(countryCounts, '\n')
print('\nNumber of countries: ', len(uniqueCountry), '\n')
print("The most occuring country is: " , countryCounts.index[0])

"""***Identify if there's data missing. where and how much of it***"""

# Any missing data?

df.isnull().values.any()

# Total of missing data in each feature column

print('In each column the sum of missing data is: ' + '\n')
df.isnull().sum()

# replace the missing data in the dataset with "unknown"

df['Categories'].fillna('Unknown', inplace=True)
df

"""
**Find outliers in the dataset using statistical methods**"""

def find_outliers_IQR(df):

   q1 = df.quantile(0.25)

   q3 = df.quantile(0.75)

   IQR = q3 - q1

   outliers = df[((df < (q1 - 1.5*IQR)) | (df > (q3 + 1.5*IQR)))]

   return outliers

# Find outliers in Subscribers

outliers = find_outliers_IQR(df['Subscribers'])

print('number of outliers in Subscribers: ' , str(len(outliers)))

print('maximum outlier value: ' , str(outliers.max()))

print('minimum outlier value: ' , str(outliers.min()) , '\n')

print('The outliers in Subscribers are' + '\n')

outliers

# Find outliers in Visits

outliers = find_outliers_IQR(df['Visits'])

print('number of outliers in Visits: ' , str(len(outliers)))

print('maximum outlier value: ' , str(outliers.max()))

print('minimum outlier value: ' , str(outliers.min()) , '\n')

print('The outliers in Visits are' + '\n')

outliers

# Find outliers in Likes

outliers = find_outliers_IQR(df['Likes'])

print('number of outliers in Likes: ' , str(len(outliers)))

print('maximum outlier value: ' , str(outliers.max()))

print('minimum outlier value: ' , str(outliers.min()) , '\n')

print('The outliers in Likes are' + '\n')

outliers

# Find outliers in Comments

outliers = find_outliers_IQR(df['Comments'])

print('number of outliers in Comments: ' , str(len(outliers)))

print('maximum outlier value: ' , str(outliers.max()))

print('minimum outlier value: ' , str(outliers.min()) , '\n')

print('The outliers in Comments are' + '\n')

outliers

"""**Visualisation of outliers**"""

# Histogram for the Subscribers

# df['Subscribers'].hist(bins = 1000)
# plt.title('Subscribers')
# plt.xlabel('Subscribers')
# plt.ylabel('Count')
# plt.show()

fig = px.box(df, y = 'Subscribers')
fig.update_layout(title='Box Plot of Subscribers')

fig.show()

"""From the box plot of the Subscribers, we can see that the median is around 100 million subscribers. This means that half of the YouTubers in the dataset have more than 100 million subscribers.

"""

#create a box plot for Visits

fig = px.box(df, y = 'Visits')
fig.update_layout(title='Box Plot of Visits')

fig.show()

# create a box plot for Likes

fig = px.box(df, y = 'Likes')
fig.update_layout(title='Box Plot of Likes')

fig.show()

# create a box plot for Comments

fig = px.box(df, y = 'Comments')
fig.update_layout(title='Box Plot of Comments')

fig.show()

# draw box plot for the Subscribers, Visits, Likes and Comments right next to each other

fig = plt.figure(figsize=(10, 5))

plt.subplot(2, 2, 1)

sns.boxplot(df['Subscribers'])

plt.title('Subscribers')

plt.subplot(2, 2, 2)

sns.boxplot(df['Visits'])

plt.title('Visits')

plt.subplot(2, 2, 3)

sns.boxplot(df['Likes'])

plt.title('Likes')

plt.subplot(2, 2, 4)

sns.boxplot(df['Comments'])

plt.title('Comments')

plt.show()

"""# Trend Analysis

**Finding the correlation for between Subscribers and Likes/Comments**
"""

# Scatter plot using Likes

fig = px.scatter(x = df['Subscribers'], y = df['Likes'])
fig.update_layout(title='Scatter plot between Subscribers and Likes')

fig.show()

"""From the scatter plot of the Subscribers and Likes, we can see that there is a positive correlation between the two variables. This means that the more subscribers a YouTuber has, the more Likes they are likely to receive.

"""

# Calculate the correlation between Subscribers and Likes

correlation = df['Subscribers'].corr(df['Likes'])

print('Correlation is ' , correlation, '\n' )
print('The conclusion is that there is a positive and weak correlation between Subscribers and Likes')

# Scatter plot using Comments

fig = px.scatter(x = df['Subscribers'], y = df['Comments'])
fig.update_layout(title='Scatter plot between Subscribers and Comments')
fig.show()

"""From the scatter plot of the Subscribers and Comments, we can see that there is also a positive correlation between the two variables. This means that the more subscribers a YouTuber has, the more Comments they are likely to receive."""

# Calculate the correlation between Subscribers and Comments

correlation = df['Subscribers'].corr(df['Comments'])

print('Correlation is ' , correlation, '\n')
print('The conclusion is that there is a positive and very weak correlation between Subscribers and Comments')

"""# Audience Study"""

# Plot of a frequency distribution of the category distribition in the country with high frequency

fig = px.histogram(df, x="Categories", color="Country", barmode='stack')
fig.update_layout(title='Stacked bar graph of categories by countries')
fig.show()

# Bar graph of the categories in the country with high frequency

topCountry = df['Country'].value_counts().index[0]

categoryCounts = df[df['Country'] == topCountry]['Categories'].value_counts()

categoryCounts.plot(kind ='bar')

plt.title('Bar Chart showing category distribution in ' + topCountry)

plt.xlabel('Categories')

plt.ylabel('Frequency')

plt.show()

"""From the bar graph of the categories in US, we can see that the most popular 'known' category in the United States is "Music". This is likely because music is one of the most popular genres of content on YouTube.

# Performance Metrics

**Calculate and visualize the average number of subscribers, visits, likes, and comments.**
"""

# Calculate the average number of Subscribers

print('The average number of subscribers is' , df['Subscribers'].mean())

# create a bar chart for the average number of subscribers

df.groupby(['Categories']).mean().plot(kind ='bar', y = 'Subscribers')

plt.title('Average number of subscribers per category')

plt.xlabel('Category')

plt.ylabel('Average number of subscribers')

plt.show()

"""From the bar chart of the average number of subscribers per category, we can see that the categories with the highest average number of subscribers are "Music", "Entertainment", and "Gaming". This is likely because these categories are some of the most popular categories on YouTube.

"""

# Calculate the average number of Visits

print('The average number of Visits in the dataset is' , df['Visits'].mean())

# create a bar chart for the average number of subscribers

df.groupby(['Categories']).mean().plot(kind ='bar', y = 'Visits')

plt.title('Average number of Visits per category')

plt.xlabel('category')

plt.ylabel('Average number of visits')

plt.show()

""" From the bar chart of the average number of visits per category, we can see that the categories with the highest average number of visits are "Music", "Entertainment", and "Gaming". This is likely because these categories are some of the most popular categories on YouTube.

"""

# Calculate the average number of Likes

print('The average number of Likes in the dataset is' , df['Likes'].mean())

# create a bar chart for the average number of Likes

df.groupby(['Categories']).mean().plot(kind ='bar', y = 'Likes')

plt.title('Average number of Likes per category')

plt.xlabel('category')

plt.ylabel('Average number of Likes')

plt.show()

"""From the bar chart of the average number of Likes per category, we can see that the categories with the highest average number of Likes are "Music", "Entertainment", and "Gaming". This is likely because these categories are some of the most popular categories on YouTube.

"""

# Calculate the average number of Comments

print('The average number of Comments in the dataset is' , df['Comments'].mean())

# create a bar chart for the average number of Comments

df.groupby(['Categories']).mean().plot(kind ='bar', y = 'Comments')

plt.title('Average number of Comments per category')

plt.xlabel('category')

plt.ylabel('Average number of Comments')

plt.show()

"""From the bar chart of the average number of Comments per category, we can see that the categories with the highest average number of Comments are "Music", "Entertainment", and "Gaming". This is likely because these categories are some of the most popular categories on YouTube.

**Overall, the patterns in the four visualizations are that the most popular categories on YouTube are "Music", "Entertainment", and "Gaming". These categories have the highest average number of subscribers, visits, Likes, and Comments.**

# Content Categories
"""

# A list of top Categoriess in the dataset

topCategories = df.sort_values('Categories', ascending = False).head(10)

topCategories

# A list of top Categoriess in the dataset

lowCategories = df.sort_values('Categories', ascending = False).tail(10)

lowCategories

# Identify categories with exceptional performance metrics

exceptionalCategories = df.groupby(['Categories']).mean().sort_values('Subscribers', ascending = False).head(5)

print('The categories with exceptional performance metrics are:' , '\n')

exceptionalCategories

"""# Brands and Collaborations:

Streamers with high performing metrics are likely to receive more brand collaborations and marketing campaigns because a high count of Subscribers, Likes and Comments basically suugests that the Streamer has more engagement and thus meaning brands collaborating with the streamer are bound to get more exposure.

# Benchmarking

**Streamers with above-average performance in terms of subscribers, visits, likes, and comments**
"""

# Identify streamers with above-average performance in terms of subscribers, visits, likes, and comments

df['Above Average Subscribers'] = df['Subscribers'] > df['Subscribers'].mean()

df['Above Average Visits'] = df['Visits'] > df['Visits'].mean()

df['Above Average Likes'] = df['Likes'] > df['Likes'].mean()

df['Above Average Comments'] = df['Comments'] > df['Comments'].mean()

aboveAverage = df[(df['Above Average Subscribers'] == True) & (df['Above Average Visits'] == True) & (df['Above Average Likes'] == True) & (df['Above Average Comments'] == True)]

print('There are' , len(aboveAverage) , 'streamers with above-average performance in terms of subscribers, visits, likes, and comments.')

print('The streamers with above-average performance are:' , '\n')

aboveAverage

# A list of top performing youtubers in the dataset

topPerformers = df.sort_values('Subscribers', ascending = False).head(10)

topPerformers

# A list of top performing youtubers in the dataset

lowPerformers = df.sort_values('Subscribers', ascending = False).tail(10)

lowPerformers

"""# Content Recommendations:

Use **Machine Learning** to **Categorize Streamers** and to **Track Performance Metrics** by continuous learning of the streamers preferences.

Categorize streamers based on the type of content they stream, they could be allowed to select their own categories like iMusic and Sportify to name a few, or can be assigned categories based on the content they stream. Then we track performance metrics such as Visits, Likes and Comments, for each streamed category. This data could be used to identify popular YouTubers and  their categories, thus being exposed brand collaborations.
"""